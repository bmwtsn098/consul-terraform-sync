// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets health status
	// (GET /v1/health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Gets cluster status when CTS is configured with high availability
	// (GET /v1/status/cluster)
	GetClusterStatus(w http.ResponseWriter, r *http.Request)
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetClusterStatus operation middleware
func (siw *ServerInterfaceWrapper) GetClusterStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "run", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/status/cluster", wrapper.GetClusterStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
